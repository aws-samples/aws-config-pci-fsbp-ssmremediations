
# -------------------------------------------------------------------------------------------------------------------------------------------------------
#  CloudFormation Template 2 of 2 - Real Time Automated Remediation for Foundation Security Findings based on Security Hub 
#  
#  Pre-req : Uses the AWS SSM Automation CloudFormation Template. 
#  This template integrates AWS Security Hub custom actions with Custom AWS SSM Automation Remediation Documents
# 
# @author Kanishk Mahajan
# -------------------------------------------------------------------------------------------------------------------------------------------------------


Resources:

  CreateSecurityHubCustomActionTargetLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-CreateSecurityHubCustomActionTargetLambda
      Description: Custom resource to create an action target in Security Hub
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt CreateSecurityHubCustomActionTargetLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          def lambda_handler(event, context):
              try:
                  properties = event['ResourceProperties']
                  region = os.environ['AWS_REGION']
                  client = boto3.client('securityhub', region_name=region)
                  responseData = {}
                  if event['RequestType'] == 'Create':
                      response = client.create_action_target(
                          Name=properties['Name'],
                          Description=properties['Description'],
                          Id=properties['Id']
                      )
                      responseData['Arn'] = response['ActionTargetArn']
                  elif event['RequestType'] == 'Delete':
                      account_id = context.invoked_function_arn.split(":")[4]
                      client.delete_action_target(
                          ActionTargetArn=f"arn:aws:securityhub:{region}:{account_id}:action/custom/{properties['Id']}"
                      )
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
  
  CreateSecurityHubCustomActionTargetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: CreateActionTarget-LambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - securityhub:CreateActionTarget
            - securityhub:DeleteActionTarget
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole

# -------------------------------------------------------------------------------------------------------------------------------------------------------
# S3.3 – S3 Buckets should prohibit public write access
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  S3BucketPublicWriteProhibitedRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-S3BucketPublicWriteProhibitedRule
      Description: "S3.3 - S3 Buckets should prohibit public write access"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt S3BucketPublicWriteActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "S3BucketPublicWriteRemediationLambda"
              - "Arn"
          Id: "S33"
  
  S3BucketPublicWriteActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: S33
      Description: S3 Public Write Event from Security Hub
      Id: S33

  S3BucketPublicWriteRemediationLambdaPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "S3BucketPublicWriteRemediationLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "S3BucketPublicWriteProhibitedRule"
          - "Arn"

  S3BucketPublicWriteRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: S3RemediationLambdaRole
    Properties:
      FunctionName: S3BucketPublicWriteRemediationLambda
      Description: S3.1 Remediation using AWS SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt  S3RemediationLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
            
              S3BucketArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              Id = str(event['detail']['findings'][0]['Id'])
              S3BucketName = S3BucketArn.replace("arn:aws:s3:::", "")
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='AWS-DisableS3BucketPublicReadWrite',
                      DocumentVersion='1', # default
                      Parameters={
                          'S3BucketName': [ S3BucketName ]
                      }
                  )

              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  S3RemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: S3RemediationLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - s3:GetBucketAcl
            - s3:GetBucketPolicy
            - s3:PutBucketAcl
            - s3:PutBucketPolicy
            - s3:PutBucketPublicAccessBlock
            - iam:PassRole
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole

# -------------------------------------------------------------------------------------------------------------------------------------------------------
# S3.2 – S3 Buckets should prohibit public read access
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  S3BucketPublicReadProhibitedRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-S3BucketPublicReadProhibitedRule
      Description: "S3.2 - S3 Buckets should prohibit public read access"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt S3BucketPublicReadActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "S3BucketPublicReadRemediationLambda"
              - "Arn"
          Id: "S32"
  
  S3BucketPublicReadActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: S32
      Description: S3 Public Write Event from Security Hub
      Id: S32

  S3BucketPublicReadRemediationLambdaPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "S3BucketPublicReadRemediationLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "S3BucketPublicReadProhibitedRule"
          - "Arn"

  S3BucketPublicReadRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: S3RemediationLambdaRole
    Properties:
      FunctionName: FSBP-S3BucketPublicReadRemediationLambda
      Description: S3.2 Remediation using AWS SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt  S3RemediationLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
            
              S3BucketArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              Id = str(event['detail']['findings'][0]['Id'])
              S3BucketName = S3BucketArn.replace("arn:aws:s3:::", "")
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='AWS-DisableS3BucketPublicReadWrite',
                      DocumentVersion='1', # default
                      Parameters={
                          'S3BucketName': [ S3BucketName ]
                      }
                  )

              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  S3RemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: S3RemediationLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - s3:GetBucketAcl
            - s3:GetBucketPolicy
            - s3:PutBucketAcl
            - s3:PutBucketPolicy
            - s3:PutBucketPublicAccessBlock
            - iam:PassRole
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole

  
# -------------------------------------------------------------------------------------------------------------------------------------------------------
# [CloudTrail.1] CloudTrail should be enabled and configured with at least one multi-Region trail
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  CloudTrailEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-CloudTrailEnabledRule
      Description: "CloudTrail.1 CloudTrail should be enabled and configured with at least one multi-Region trail"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt CloudTrailEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "CloudTrailEnabledLambda"
              - "Arn"
          Id: "CloudTrail1"
   
  CloudTrailEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt FSBP-CreateSecurityHubCustomActionTargetLambda.Arn
      Name: CloudTrail1
      Description: CloudTrail.1 Event from Security Hub
      Id: CloudTrail1

  CloudTrailEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "CloudTrailEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "CloudTrailEnabledRule"
          - "Arn"

  CloudTrailEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: CloudTrailEnabledLambdaRole
    Properties:
      FunctionName: FSBP-CloudTrailEnabledLambda
      Description: CloudTrail.1 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt  CloudTrailEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          S3BucketName : !ImportValue FSBP-CISS3CloudTrailBucket
          TrailName : !ImportValue FSBP-CISCloudTrail
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              TrailName = os.environ['TrailName']
              S3BucketName = os.environ['S3BucketName']
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='AWS-EnableCloudTrail',
                      DocumentVersion='1', # default
                      Parameters={
                          'TrailName': [ TrailName ],
                          'S3BucketName': [ S3BucketName]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  CloudTrailEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: CloudTrailEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - cloudtrail:*
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole

# -------------------------------------------------------------------------------------------------------------------------------------------------------
# CloudTrail.2 – Ensure CloudTrail logs are encrypted at rest using AWS KMS CMKs
# 
# Provisions a custom security hub action 
# Leverages the custom security hub action as source for CWE rule 
# Provisions a lambda as a CWE target for custom action
# Leverages custom SSM Automation document for remediation

# Repeats same pattern above for each Foundational Security Benchmark remediation
# 
# @kanishk.mahajan
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  CloudTrailEncryptionEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: CloudTrailEncryptionEnabledRule
      Description: "CloudTrail.2 – Ensure CloudTrail logs are encrypted at rest using AWS KMS CMKs"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt CloudTrailEncryptionEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "CloudTrailEncryptionEnabledLambda"
              - "Arn"
          Id: "CloudTrail2"
   
  CloudTrailEncryptionEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: CloudTrail2
      Description: CloudTrail.2 Event from Security Hub
      Id: CloudTrail2

  CloudTrailEncryptionEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "CloudTrailEncryptionEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "CloudTrailEncryptionEnabledRule"
          - "Arn"

  CloudTrailEncryptionEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: CloudTrailEncryptionEnabledLambdaRole
    Properties:
      FunctionName: CloudTrailEncryptionEnabledLambda
      Description: CIS 2.7 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt  CloudTrailEncryptionEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          CloudTrailLogGroupArn : !ImportValue FSBP-CloudTrailLogGroupArn
          CloudWatchRoleArn : !ImportValue FSBP-CloudWatchRoleArn
          KMSKeyArn: !ImportValue FSBP-KMSKeyArn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              TrailArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              TrailArn_1 = TrailArn.split(':')[-1] 
              TrailName = TrailArn_1.replace("trail/","")

              Id = str(event['detail']['findings'][0]['Id'])
              CloudTrailLogGroupArn = os.environ['CloudTrailLogGroupArn']
              CloudWatchRoleArn = os.environ['CloudWatchRoleArn']
              KMSKeyArn = os.environ['KMSKeyArn']
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-CloudTrailEncryptionCF',
                      DocumentVersion='1', # default
                      Parameters={
                          'TrailName': [ TrailName ],
                          'CloudTrailLogGroupArn': [ CloudTrailLogGroupArn ],
                          'CloudWatchRoleArn': [ CloudWatchRoleArn ],
                          'KMSKeyArn': [ KMSKeyArn ]
                      }
                  )

              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  CloudTrailEncryptionEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: CloudTrailEncryptionEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - kms:*
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole
  
# -------------------------------------------------------------------------------------------------------------------------------------------------------
# EC2.2 VPC default security group should prohibit inbound and outbound traffic
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  RestrictEC2SecurityGroupsRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-RestrictEC2SecurityGroupsRule
      Description: "EC2.2 VPC default security group should prohibit inbound and outbound traffic"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt RestrictEC2GroupsActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "RestrictEC2GroupsRemediationLambda"
              - "Arn"
          Id: "EC22"
   
  RestrictEC2GroupsActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt  CreateSecurityHubCustomActionTargetLambda.Arn
      Name: EC22
      Description: EC2.2 Event from Security Hub
      Id: EC22

  RestrictEC2GroupsLambdaPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "RestrictEC2GroupsRemediationLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "RestrictEC2SecurityGroupsRule"
          - "Arn"

  RestrictEC2GroupsRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: RestrictEC2GroupsRemediationLambdaRole
    Properties:
      FunctionName: FSBP-RestrictEC2GroupsRemediationLambda
      Description: PCI.EC2.2 Remediation using AWS SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt  RestrictEC2GroupsRemediationLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              securitygroup = str(event['detail']['findings'][0]['Resources'][0]['Details']['AwsEc2SecurityGroup']['GroupId'])
              Id = str(event['detail']['findings'][0]['Id'])
              ssm = boto3.client('ssm')
              IpAddressToBlock = '0.0.0.0/0'
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-RestrictSecurityGroup',
                      DocumentVersion='1', # default
                      Parameters={
                          'groupId': [ securitygroup],
                           'IpAddressToBlock': [IpAddressToBlock]
                      }
                  )

              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  RestrictEC2GroupsRemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: FSBP-RestrictEC2GroupsRemediationLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - ec2:DescribeSecurityGroupReferences
            - ec2:DescribeSecurityGroups
            - ec2:UpdateSecurityGroupRuleDescriptionsEgress
            - ec2:UpdateSecurityGroupRuleDescriptionsIngress
            - ec2:RevokeSecurityGroupIngress
            - ec2:RevokeSecurityGroupEgress
            - ec2:*
            - iam:PassRole
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole

# -------------------------------------------------------------------------------------------------------------------------------------------------------
# [CodeBuild.2] CodeBuild project environment variables should not contain clear text credentials
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  CodeBuildEnvVariablesRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-CodeBuildEnvVariablesRule
      Description: "[CodeBuild.2] CodeBuild project environment variables should not contain clear text credentials"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt CodeBuildEnvVariablesRuleActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "CodeBuildEnvVariablesRuleRemediationLambda"
              - "Arn"
          Id: "CodeBuild2"
   
  CodeBuildEnvVariablesRuleActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt  CreateSecurityHubCustomActionTargetLambda.Arn
      Name: CodeBuild2
      Description: CodeBuild.2 Event from Security Hub
      Id: CodeBuild2

  CodeBuildEnvVariablesRuleLambdaPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "CodeBuildEnvVariablesRuleRemediationLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "CodeBuildEnvVariablesRule"
          - "Arn"

  CodeBuildEnvVariablesRuleRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: CodeBuildEnvVariablesRuleRemediationLambdaRole
    Properties:
      FunctionName: FSBP-CodeBuildEnvVariablesRuleRemediationLambda
      Description: CodeBuild.2 Remediation using AWS SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt  CodeBuildEnvVariablesRuleRemediationLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
    
              codebuildprojectArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              codebuildprojectArn_1 = codebuildprojectArn.split(':')[-1] 
              codebuildproject = codebuildprojectArn_1.replace("project/","")

              Id = str(event['detail']['findings'][0]['Id'])
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-CodeBuildUpdateProject',
                      DocumentVersion='1', # default
                      Parameters={
                          'projectName': [ codebuildproject]
                      }
                  )

              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  CodeBuildEnvVariablesRuleRemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: CodeBuildEnvVariablesRuleRemediationLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - ec2:DescribeSecurityGroupReferences
            - ec2:DescribeSecurityGroups
            - ec2:UpdateSecurityGroupRuleDescriptionsEgress
            - ec2:UpdateSecurityGroupRuleDescriptionsIngress
            - ec2:RevokeSecurityGroupIngress
            - ec2:RevokeSecurityGroupEgress
            - ec2:*
            - codebuild:*
            - iam:PassRole
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole
  
# -------------------------------------------------------------------------------------------------------------------------------------------------------
# [CloudTrail.1] CloudTrail should be enabled and configured with at least one multi-Region trail
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  CloudTrailEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-CloudTrailEnabledRule
      Description: "CloudTrail.1 – Ensure CloudTrail is enabled in all regions"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt CloudTrailEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "CloudTrailEnabledLambda"
              - "Arn"
          Id: "CloudTrail1"
   
  CloudTrailEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: CloudTrail1
      Description: PCI.CloudTrail.2 Event from Security Hub
      Id: CloudTrail1

  CloudTrailEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "CloudTrailEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "CloudTrailEnabledRule"
          - "Arn"

  CloudTrailEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: CloudTrailEnabledLambdaRole
    Properties:
      FunctionName: FSBP-CloudTrailEnabledLambda
      Description: CIS 2.1 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt  CloudTrailEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          S3BucketName : !ImportValue FSBP-CISS3CloudTrailBucket
          TrailName : !ImportValue FSBP-CISCloudTrail
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              TrailName = os.environ['TrailName']
              S3BucketName = os.environ['S3BucketName']
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='AWS-EnableCloudTrail',
                      DocumentVersion='1', # default
                      Parameters={
                          'TrailName': [ TrailName ],
                          'S3BucketName': [ S3BucketName]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  CloudTrailEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: CloudTrailEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - cloudtrail:*
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole
    
# -------------------------------------------------------------------------------------------------------------------------------------------------------
# [IAM.7] Password policies for IAM users should have strong configurations
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  IAMPasswordPolicyEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-IAMPasswordPolicyEnabledRule
      Description: "CIS AWS Foundations Benchmark - 1.5-1.11. – IAM Account Settings related to Password Policy"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt IAMPasswordPolicyEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "IAMPasswordPolicyEnabledLambda"
              - "Arn"
          Id: "IAM7"
   
  IAMPasswordPolicyEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: IAM7
      Description: IAM.7 Password policies for IAM users should have strong configurations
      Id: IAM7

  IAMPasswordPolicyEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "IAMPasswordPolicyEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "IAMPasswordPolicyEnabledRule"
          - "Arn"

  IAMPasswordPolicyEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: IAMPasswordPolicyEnabledLambdaRole
    Properties:
      FunctionName: FSBP-IAMPasswordPolicyEnabledLambda
      Description: CIS 1.5-1.11 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt  IAMPasswordPolicyEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-IAMPasswordUpdateCF',
                      DocumentVersion='1', # default
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  IAMPasswordPolicyEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: IAMPasswordPolicyEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            - iam:*
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole

# -------------------------------------------------------------------------------------------------------------------------------------------------------
# [IAM.3] IAM users' access keys should be rotated every 90 days or less
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  IAMRotate90daysEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-IAMRotate90daysEnabledRule
      Description: "IAM3 – Disable and Rotate IAM Access Key that is older than 90 days"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt IAMRotate90daysEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "IAMRotate90daysEnabledLambda"
              - "Arn"
          Id: "IAM3"
   
  IAMRotate90daysEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: IAM3
      Description: IAM.3 Events from Security Hub
      Id: IAM3

  IAMRotate90daysEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "IAMRotate90daysEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "IAMRotate90daysEnabledRule"
          - "Arn"

  IAMRotate90daysEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: IAMRotate90daysEnabledLambdaRole
    Properties:
      FunctionName: FSBP-IAMRotate90daysEnabledLambda
      Description: IAM3 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt  IAMRotate90daysEnabledLambdaRole.Arn
      Runtime: python3.6
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              userArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              userArn_1 = userArn.split(':')[-1] 
              username = userArn_1.replace("user/","")
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-IAMKeyRotate90DaysCF',
                      DocumentVersion='1', # default
                      Parameters={
                          'username': [ username ]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  IAMRotate90daysEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: IAMRotate90daysEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            - iam:*
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole

# -------------------------------------------------------------------------------------------------------------------------------------------------------
# [IAM.4] IAM root user access key should not exist
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  DeactivateRootIAMAccessKeyEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-DeactivateRootIAMAccessKeyEnabledRule
      Description: "IAM.4 – Deactivate Root Account Access Key"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt DeactivateRootIAMAccessKeyEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "DeactivateRootIAMAccessKeyEnabledLambda"
              - "Arn"
          Id: "IAM4"
   
  DeactivateRootIAMAccessKeyEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: IAM4
      Description: IAM.4 Events from Security Hub
      Id: IAM4

  DeactivateRootIAMAccessKeyEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "DeactivateRootIAMAccessKeyEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "DeactivateRootIAMAccessKeyEnabledRule"
          - "Arn"

  DeactivateRootIAMAccessKeyEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: DeactivateRootIAMAccessKeyEnabledLambdaRole
    Properties:
      FunctionName: FSBP-DeactivateRootIAMAccessKeyEnabledLambda
      Description: IAM.4 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt  DeactivateRootIAMAccessKeyEnabledLambdaRole.Arn
      Runtime: python3.6
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              userArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              username = userArn.split(':')[-1] 
     
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-DeactivateRootIAMAccessKeyCF',
                      DocumentVersion='1', # default
                      Parameters={
                          'username': [ username ]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  DeactivateRootIAMAccessKeyEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: DeactivateRootIAMAccessKeyEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            - iam:*
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole
  
# -------------------------------------------------------------------------------------------------------------------------------------------------------
# IAM.2 – IAM users should not have IAM policies attached
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  IAMUserPolicyDetachEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-IAMUserPolicyDetachEnabledRule
      Description: "IAM.2 – Ensure IAM policies are attached only to groups or roles"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt IAMUserPolicyDetachEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "IAMUserPolicyDetachEnabledLambda"
              - "Arn"
          Id: "IAM2"
   
  IAMUserPolicyDetachEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: IAM2
      Description: IAM.2 Events from Security Hub
      Id: IAM2

  IAMUserPolicyDetachEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "IAMUserPolicyDetachEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "IAMUserPolicyDetachEnabledRule"
          - "Arn"

  IAMUserPolicyDetachEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: IAMUserPolicyDetachEnabledLambdaRole
    Properties:
      FunctionName: FSBP-IAMUserPolicyDetachEnabledLambda
      Description: IAM.2 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt IAMUserPolicyDetachEnabledLambdaRole.Arn
      Runtime: python3.6
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              userArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              userArn_1 = userArn.split(':')[-1] 
              username = userArn_1.replace("user/","")

              Id = str(event['detail']['findings'][0]['Id'])

              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-IAMUserPolicyDetachCF',
                      DocumentVersion='1', # default
                      Parameters={
                          'username': [ username ],
                          'findingid': [Id]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  IAMUserPolicyDetachEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: IAMUserPolicyDetachEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            - iam:*
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole


# -------------------------------------------------------------------------------------------------------------------------------------------------------
# IAM.1 IAM policies should not allow full "*" administrative privileges
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  IAMFullAdminPolicyDetachEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-IAMFullAdminPolicyDetachEnabledRule
      Description: "IAM.1 IAM policies should not allow full * administrative privileges"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt IAMFullAdminPolicyDetachEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "IAMFullAdminPolicyDetachEnabledLambda"
              - "Arn"
          Id: "IAM1"
   
  IAMFullAdminPolicyDetachEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: IAM1
      Description: IAM.1 Events from Security Hub
      Id: IAM1

  IAMFullAdminPolicyDetachEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "IAMFullAdminPolicyDetachEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "IAMFullAdminPolicyDetachEnabledRule"
          - "Arn"

  IAMFullAdminPolicyDetachEnabledLambda:
    Type: AWS::Lambda::Function
    DependsOn: IAMFullAdminPolicyDetachEnabledLambdaRole
    Properties:
      FunctionName: FSBP-IAMFullAdminPolicyDetachEnabledLambda
      Description: IAM.1 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt IAMFullAdminPolicyDetachEnabledLambdaRole.Arn
      Runtime: python3.6
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              userArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              userArn_1 = userArn.split(':')[-1] 
              username = userArn_1.replace("user/","")


              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-IAMFullAdminPolicyDetachCF',
                      DocumentVersion='1', # default
                      Parameters={
                          'username': [ username ]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  IAMFullAdminPolicyDetachEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: IAMFullAdminPolicyDetachEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            - iam:*
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole


# -------------------------------------------------------------------------------------------------------------------------------------------------------
#  S3.4 S3 buckets should have server-side encryption enabled
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  S3BucketServerSideEncryptionEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-S3BucketServerSideEncryptionEnabledRule
      Description: " S3.4 – Ensure server side encryption is enabled on S3 buckets"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt S3BucketServerSideEncryptionEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "S3BucketServerSideEncryptionEnabledLambda"
              - "Arn"
          Id: "S34"
   
  S3BucketServerSideEncryptionEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: S34
      Description: S3.4 Event from Security Hub
      Id: S34

  S3BucketServerSideEncryptionEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "S3BucketServerSideEncryptionEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "S3BucketServerSideEncryptionEnabledRule"
          - "Arn"

  S3BucketServerSideEncryptionEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-S3BucketServerSideEncryptionEnabledLambda
      Description: S3.4 Remediation using Custom SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt S3BucketServerSideEncryptionEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              S3BucketArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              Id = str(event['detail']['findings'][0]['Id'])
              S3BucketName = S3BucketArn.replace("arn:aws:s3:::", "")
              SSEAlgorithm = 'AES256'
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='AWS-EnableS3BucketEncryption',
                      DocumentVersion='1', # default
                      Parameters={
                          'BucketName': [ S3BucketName ],
                          'SSEAlgorithm': [SSEAlgorithm]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  S3BucketServerSideEncryptionEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: S3BucketServerSideEncryptionEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            - s3:*
            - kms:*
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole


# -------------------------------------------------------------------------------------------------------------------------------------------------------
#  [SSM.1] EC2 instances should be managed by AWS Systems Manager
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  SSMQuickSetupEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-SSMQuickSetupEnabledRule
      Description: "[SSM.1] EC2 instances should be managed by AWS Systems Manager"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt SSMQuickSetupEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "SSMQuickSetupEnabledLambda"
              - "Arn"
          Id: "SSM1"
   
  SSMQuickSetupEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: SSM1
      Description: "SSM.1 EC2 instances should be managed by AWS Systems Manager"
      Id: SSM1

  SSMQuickSetupEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "SSMBaselinePatchComplianceEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "SSMQuickSetupEnabledRule"
          - "Arn"

  SSMQuickSetupEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-SSMQuickSetupEnabledLambda
      Description: "[SSM.1] EC2 instances should be managed by AWS Systems Manager "
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt SSMQuickSetupEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          SSMInstanceProfileRoleArn : !ImportValue FSBP-SSMInstanceProfileRoleArn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              InstanceId = str(event['detail']['findings'][0]['ProductFields']['attributes:5/value'])
              ssminstanceprofilerole_arn = os.environ['SSMInstanceProfileRoleArn']
              roleArn_1 = ssminstanceprofilerole_arn.split(':')[-1] 
              rolename = roleArn_1.replace("role/","")
              iam = boto3.client('iam')
              ssm = boto3.client('ssm')
              ec2 = boto3.client('ec2')
              try:
                 
                 response_iam_1 = iam.create_instance_profile(
                      InstanceProfileName='EC2ManagedInstanceProfile'
                 )

                 InstanceProfileArn = response_iam_1['InstanceProfile']['Arn']

                 response_iam_2 = iam.add_role_to_instance_profile(
                      InstanceProfileName='EC2ManagedInstanceProfile',
                      RoleName=rolename
                 )
                 
                 response_ec2 = ec2.associate_iam_instance_profile(
                     IamInstanceProfile={
                         'Name': 'EC2ManagedInstanceProfile'
                         'Arn': InstanceProfileArn
                     },
                     InstanceId=InstanceId
                 )

                 response = ssm.create_association(
                      Name='AWS-UpdateSSMAgent',
                      Targets=[
                          {
                              'Key': 'InstanceIds',
                              'Value': InstanceId
                          }

                      ]
                 )

              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  SSMQuickSetupEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: FSBP-SSMQuickSetupEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - ssm:*
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            - ec2:*
            - iam:*
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole

# -------------------------------------------------------------------------------------------------------------------------------------------------------
#  [SSM.2] Amazon EC2 instances managed by Systems Manager should have a patch compliance status of COMPLIANT after a patch installation
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  SSMBaselinePatchComplianceEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-SSMBaselinePatchComplianceEnabledRule
      Description: "[SSM.2] Amazon EC2 instances managed by Systems Manager should have a patch compliance status of COMPLIANT after a patch installation"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt SSMBaselinePatchComplianceEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "SSMBaselinePatchComplianceEnabledLambda"
              - "Arn"
          Id: "SSM2"
   
  SSMBaselinePatchComplianceEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: SSM2
      Description: "[SSM.2] Amazon EC2 instances managed by Systems Manager should have a patch compliance status of COMPLIANT after a patch installation"
      Id: SSM2

  SSMBaselinePatchComplianceEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "SSMBaselinePatchComplianceEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "SSMBaselinePatchComplianceEnabledRule"
          - "Arn"

  SSMBaselinePatchComplianceEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-SSMBaselinePatchComplianceEnabledLambda
      Description: "[SSM.2] Amazon EC2 instances managed by Systems Manager should have a patch compliance status of COMPLIANT after a patch installation"
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt SSMBaselinePatchComplianceEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              InstanceId = str(event['detail']['findings'][0]['ProductFields']['attributes:5/value'])
              ssm = boto3.client('ssm')
              try:
                
                 response = ssm.send_command(
                      InstanceIds=[ InstanceId ],
                      DocumentName='AWS-RunPatchBaseline',
                      DocumentVersion='1',
                      TimeoutSeconds=360,
                      Comment='RunPatchBaseline Invoked in response to Security Hub finding',
                      Parameters={ 'Operation': [ 'Install' ] },
                      CloudWatchOutputConfig={ 'CloudWatchOutputEnabled': True }
                  )

              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  SSMBaselinePatchComplianceEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: SSMBaselinePatchComplianceEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - ssm:*
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            - ec2:*
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole

# -------------------------------------------------------------------------------------------------------------------------------------------------------
#  [Lambda.1] Lambda functions should prohibit public access by other accounts
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  RestrictPublicAccessLambdaEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-RestrictPublicAccessLambdaEnabledRule
      Description: "[Lambda.1] Lambda functions should prohibit public access"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt RestrictPublicAccessLambdaEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "RestrictPublicAccessLambdaEnabledLambda"
              - "Arn"
          Id: "Lambda1"
   
  RestrictPublicAccessLambdaEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: Lambda1
      Description: "[Lambda.1] Lambda functions should prohibit public access"
      Id: Lambda1

  RestrictPublicAccessLambdaEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "RestrictPublicAccessLambdaEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "RestrictPublicAccessLambdaEnabledRule"
          - "Arn"

  RestrictPublicAccessLambdaEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-RestrictPublicAccessLambdaEnabledLambda
      Description: "[PCI.Lambda.1] Lambda functions should prohibit public access"
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt RestrictPublicAccessLambdaEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          accountID : !Ref 'AWS::AccountId'
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              functionname = str(event['detail']['findings'][0]['Resources'][0]['Details']['AwsLambdaFunction']['FunctionName'])
              Id = str(event['detail']['findings'][0]['Id'])
              accountID = os.environ['accountID']
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-RestrictPublicLambda',
                      DocumentVersion='1', # default
                      Parameters={
                          'functionname': [ functionname ],
                          'accountID': [accountID]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  RestrictPublicAccessLambdaEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: RestrictPublicAccessLambdaEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            - lambda:*
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole


# -------------------------------------------------------------------------------------------------------------------------------------------------------
#  [GuardDuty.1] GuardDuty should be enabled
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  GuardDutyEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-GuardDutyEnabledRule
      Description: "[GuardDuty.1] GuardDuty should be enabled"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt GuardDutyEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "GuardDutyEnabledLambda"
              - "Arn"
          Id: "GuardDuty1"
   
  GuardDutyEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: GuardDuty1
      Description: "[GuardDuty.1] GuardDuty should be enabled"
      Id: GuardDuty1

  GuardDutyEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "GuardDutyEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "GuardDutyEnabledRule"
          - "Arn"

  GuardDutyEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-GuardDutyEnabledLambda
      Description: "GuardDuty.1 GuardDuty should be enabled"
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt GuardDutyEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              findingpublishingfrequency='FIFTEEN_MINUTES'
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-EnableGuardDuty',
                      DocumentVersion='1', # default
                      Parameters={
                          'findingpublishingfrequency': [ findingpublishingfrequency ]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  GuardDutyEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: FSBP-GuardDutyEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole

# -------------------------------------------------------------------------------------------------------------------------------------------------------
#  [Lambda.2] Lambda functions should use latest runtimes
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  LatestRuntimeLambdaEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-LatestRuntimeLambdaEnabledRule
      Description: "[Lambda.2] Lambda functions should use latest runtimes"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt LatestRuntimeLambdaEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LatestRuntimeLambdaEnabledLambda"
              - "Arn"
          Id: "Lambda2"
   
  LatestRuntimeLambdaEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: Lambda2
      Description: "[Lambda.2] Lambda functions should use latest runtimes"
      Id: Lambda2

  LatestRuntimeLambdaEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LatestRuntimeLambdaEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "LatestRuntimeLambdaEnabledRule"
          - "Arn"

  LatestRuntimeLambdaEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-LatestRuntimeLambdaEnabledLambda
      Description: "[Lambda.2] Lambda functions should use latest runtimes"
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt LatestRuntimeLambdaEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              functionname = str(event['detail']['findings'][0]['Resources'][0]['Details']['AwsLambdaFunction']['FunctionName'])
              Id = str(event['detail']['findings'][0]['Id'])
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-LatestRuntimeLambda',
                      DocumentVersion='1', # default
                      Parameters={
                          'functionname': [ functionname ]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  LatestRuntimeLambdaEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: FSBP-LatestRuntimeLambdaEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            - lambda:*
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole

# -------------------------------------------------------------------------------------------------------------------------------------------------------
# [S3.1] S3 Block Public Access setting should be enabled
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  S3BucketPublicAccessProhibitedRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-S3BucketPublicAccessProhibitedRule
      Description: "S3.1 - S3 Block Public Access setting should be enabled"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt S3BucketPublicAccessActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "S3BucketPublicAccessRemediationLambda"
              - "Arn"
          Id: "S33"
  
  S3BucketPublicAccessActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt  CreateSecurityHubCustomActionTargetLambda.Arn
      Name: S31
      Description: S3 Public Write Event from Security Hub
      Id: S31

  S3BucketPublicAccessRemediationLambdaPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "S3BucketPublicAccessRemediationLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "S3BucketPublicAccessProhibitedRule"
          - "Arn"

  S3BucketPublicAccessRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: S3PublicAccessRemediationLambdaRole
    Properties:
      FunctionName: FSBP-S3BucketPublicAccessRemediationLambda
      Description: S3.1 Remediation using AWS SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt  S3PublicAccessRemediationLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
            
              S3BucketArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              Id = str(event['detail']['findings'][0]['Id'])
              S3BucketName = S3BucketArn.replace("arn:aws:s3:::", "")
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='AWS-DisableS3BucketPublicReadWrite',
                      DocumentVersion='1', # default
                      Parameters={
                          'S3BucketName': [ S3BucketName ]
                      }
                  )

              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  S3PublicAccessRemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: S3PublicAccessRemediationLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - s3:GetBucketAcl
            - s3:GetBucketPolicy
            - s3:PutBucketAcl
            - s3:PutBucketPolicy
            - s3:PutBucketPublicAccessBlock
            - iam:PassRole
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole


# -------------------------------------------------------------------------------------------------------------------------------------------------------
#  [EC2.3] Attached EBS volumes should be encrypted at-rest
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  EBSVolumeEncryptionEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-EBSVolumeEncryptionEnabledRule
      Description: "[EC2.3] Attached EBS volumes should be encrypted at-rest"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt EBSVolumeEncryptionEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "EBSVolumeEncryptionEnabledLambda"
              - "Arn"
          Id: "EC23"
   
  EBSVolumeEncryptionEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: EC23
      Description: "[EC2.3] Attached EBS volumes should be encrypted at-rest"
      Id: EC23

  EBSVolumeEncryptionEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "EBSVolumeEncryptionEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "EBSVolumeEncryptionEnabledRule"
          - "Arn"

  EBSVolumeEncryptionEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-EBSVolumeEncryptionEnabledLambda
      Description: "[EC2.3] Attached EBS volumes should be encrypted at-rest"
      Handler: index.lambda_handler
      MemorySize: 768
      Role: !GetAtt EBSVolumeEncryptionEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 875
      Environment:
        Variables:
          kmskeyArn : !ImportValue FSBP-KMSKeyArn
          sourceregion: !Ref "AWS::Region"
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              ebsvolumeArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              ebsvolumeId = ebsvolumeArn.split(':')[-1]
              kmskeyArn = os.environ['kmskeyArn']
              sourceregion = os.environ['sourceregion']

              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-EncryptEBSVolume',
                      DocumentVersion='1', # default
                      Parameters={
                          'ebsvolumeId': [ ebsvolumeId ]
                          'kmskeyArn': [kmskeyArn]
                          'sourceregion': [sourceregion]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  EBSVolumeEncryptionEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: FSBP-EBSVolumeEncryptionEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole


# -------------------------------------------------------------------------------------------------------------------------------------------------------
#  [RDS.3] RDS DB instances should have encryption at-rest enabled
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  RDSInstanceEncryptionEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-RDSInstanceEncryptionEnabledRule
      Description: "[RDS.2] RDS instances should have encryption at rest enabled"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt RDSInstanceEncryptionEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "RDSInstanceEncryptionEnabledLambda"
              - "Arn"
          Id: "RDS3"
   
  RDSInstanceEncryptionEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: RDS3
      Description: "[RDS.3] RDS DB instances should have encryption at-rest enabled"
      Id: RDS3

  RDSInstanceEncryptionEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "RDSInstanceEncryptionEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "RDSInstanceEncryptionEnabledRule"
          - "Arn"

  RDSInstanceEncryptionEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-RDSInstanceEncryptionEnabledLambda
      Description: "[RDS.3] RDS DB instances should have encryption at-rest enabled"
      Handler: index.lambda_handler
      MemorySize: 768
      Role: !GetAtt RDSInstanceEncryptionEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 875
      Environment:
        Variables:
          kmskeyArn : !ImportValue FSBP-KMSKeyArn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              dbinstanceArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              dbinstanceId = dbinstanceArn.split(':')[-1]
              kmskeyArn = os.environ['kmskeyArn']

              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-EncryptRDSDBInstance',
                      DocumentVersion='1', # default
                      Parameters={
                          'dbinstanceId': [ dbinstanceId ]
                          'kmskeyArn': [kmskeyArn]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  RDSInstanceEncryptionEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: FSBP-RDSInstanceEncryptionEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole

# -------------------------------------------------------------------------------------------------------------------------------------------------------
#  [RDS.2] RDS DB instances should prohibit public access, determined by the PubliclyAccessible configuration
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  RDSNonPublicInstanceEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-RDSNonPublicInstanceEnabledRule
      Description: "[RDS.2] RDS instances should prohibit public access"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt RDSNonPublicInstanceEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "RDSNonPublicInstanceEnabledLambda"
              - "Arn"
          Id: "RDS2"
   
  RDSNonPublicInstanceEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: RDS2
      Description: "[RDS.2] RDS instances should prohibit public access"
      Id: RDS2

  RDSNonPublicInstanceEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "RDSNonPublicInstanceEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "RDSNonPublicInstanceEnabledRule"
          - "Arn"

  RDSNonPublicInstanceEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-RDSNonPublicInstanceEnabledLambda
      Description: "[RDS.2] RDS instances should prohibit public access"
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt RDSNonPublicInstanceEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              dbinstanceArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              dbinstanceId = dbinstanceArn.split(':')[-1] 

              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-ModifyRDSDBInstance',
                      DocumentVersion='1', # default
                      Parameters={
                          'dbinstanceId': [ dbinstanceId ]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  RDSNonPublicInstanceEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: RDSNonPublicInstanceEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole


# -------------------------------------------------------------------------------------------------------------------------------------------------------
# [S3.3] S3 buckets should prohibit public write access
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  S3BucketPublicWriteProhibitedRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-S3BucketPublicWriteProhibitedRule
      Description: "S3.3 - S3 Buckets should prohibit public write access"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt S3BucketPublicWriteActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "S3BucketPublicWriteRemediationLambda"
              - "Arn"
          Id: "S33"
  
  S3BucketPublicWriteActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt  CreateSecurityHubCustomActionTargetLambda.Arn
      Name: S33
      Description: S3 Public Write Event from Security Hub
      Id: S33

  S3BucketPublicWriteRemediationLambdaPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "S3BucketPublicWriteRemediationLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "S3BucketPublicWriteProhibitedRule"
          - "Arn"

  S3BucketPublicWriteRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: S3PublicWriteRemediationLambdaRole
    Properties:
      FunctionName: FSBP-S3BucketPublicWriteRemediationLambda
      Description: S3.3 Remediation using AWS SSM Document
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt  S3PublicWriteRemediationLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
            
              S3BucketArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              Id = str(event['detail']['findings'][0]['Id'])
              S3BucketName = S3BucketArn.replace("arn:aws:s3:::", "")
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='AWS-DisableS3BucketPublicReadWrite',
                      DocumentVersion='1', # default
                      Parameters={
                          'S3BucketName': [ S3BucketName ]
                      }
                  )

              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  S3PublicWriteRemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: S3PublicWriteRemediationLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - s3:GetBucketAcl
            - s3:GetBucketPolicy
            - s3:PutBucketAcl
            - s3:PutBucketPolicy
            - s3:PutBucketPublicAccessBlock
            - iam:PassRole
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole


# -------------------------------------------------------------------------------------------------------------------------------------------------------
#  [RDS.1] RDS snapshots should prohibit public access
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  RDSPublicNonRestoreSnapshotEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-RDSPublicNonRestoreSnapshotEnabledRule
      Description: "[RDS.1] RDS snapshots should prohibit public access"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt RDSPublicNonRestoreSnapshotEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "RDSPublicNonRestoreSnapshotEnabledLambda"
              - "Arn"
          Id: "RDS1"
   
  RDSPublicNonRestoreSnapshotEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: RDS1
      Description: "[RDS.1] RDS snapshots should prohibit public access"
      Id: RDS1

  RDSPublicNonRestoreSnapshotEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "RDSPublicNonRestoreSnapshotEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "RDSPublicNonRestoreSnapshotEnabledRule"
          - "Arn"

  RDSPublicNonRestoreSnapshotEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-RDSPublicNonRestoreSnapshotEnabledLambda
      Description: "[RDS.1] RDS snapshots should prohibit public access"
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt RDSPublicNonRestoreSnapshotEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              snapshotArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              snapshotType = str(event['detail']['findings'][0]['Resources'][0]['Type'])
              snapshotId = snapshotArn.split(':')[-1]
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-ModifyRDSSnapshot',
                      DocumentVersion='1', # default
                      Parameters={
                          'snapshotId': [snapshotId],
                          'snapshotType': [snapshotType]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  RDSPublicNonRestoreSnapshotEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: RDSPublicNonRestoreSnapshotEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole

# -------------------------------------------------------------------------------------------------------------------------------------------------------
# [S3.2] S3 buckets should prohibit public read access
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  S3BucketPublicReadProhibitedRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-S3BucketPublicReadProhibitedRule
      Description: "[S3.2] S3 buckets should prohibit public read access"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt S3BucketPublicReadActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "S3BucketPublicReadRemediationLambda"
              - "Arn"
          Id: "S32"
  
  S3BucketPublicReadActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt  CreateSecurityHubCustomActionTargetLambda.Arn
      Name: S32
      Description: S32 Event from Security Hub
      Id: S32

  S3BucketPublicReadRemediationLambdaPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "S3BucketPublicReadRemediationLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "S3BucketPublicReadProhibitedRule"
          - "Arn"

  S3BucketPublicReadRemediationLambda:
    Type: AWS::Lambda::Function
    DependsOn: S3PublicReadRemediationLambdaRole
    Properties:
      FunctionName: FSBP-S3BucketPublicReadRemediationLambda
      Description: " S3 buckets should prohibit public read access"
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt  S3PublicReadRemediationLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
            
              S3BucketArn = str(event['detail']['findings'][0]['Resources'][0]['Id'])
              Id = str(event['detail']['findings'][0]['Id'])
              S3BucketName = S3BucketArn.replace("arn:aws:s3:::", "")
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='AWS-DisableS3BucketPublicReadWrite',
                      DocumentVersion='1', # default
                      Parameters={
                          'S3BucketName': [ S3BucketName ]
                      }
                  )

              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  S3PublicReadRemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: S3PublicReadRemediationLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - s3:GetBucketAcl
            - s3:GetBucketPolicy
            - s3:PutBucketAcl
            - s3:PutBucketPolicy
            - s3:PutBucketPublicAccessBlock
            - iam:PassRole
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole

 
# -------------------------------------------------------------------------------------------------------------------------------------------------------
#  [EC2.1] Amazon EBS snapshots should not be public, determined by the ability to be restorable by anyone
# -------------------------------------------------------------------------------------------------------------------------------------------------------

  EBSPublicNonRestoreSnapshotEnabledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: FSBP-EBSPublicNonRestoreSnapshotEnabledRule
      Description: "[EC2.1] Amazon EBS snapshots should not be publicly restorable"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Custom Action
        resources: 
          - !GetAtt EBSPublicNonRestoreSnapshotEnabledActionTarget.Arn
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "EBSPublicNonRestoreSnapshotEnabledLambda"
              - "Arn"
          Id: "EC2.1"
   
  EBSPublicNonRestoreSnapshotEnabledActionTarget:
    Type: Custom::ActionTarget
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateSecurityHubCustomActionTargetLambda.Arn
      Name: EC21
      Description: "[EC2.1] Amazon EBS snapshots should not be publicly restorable"
      Id: EC21

  EBSPublicNonRestoreSnapshotEnabledPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "EBSPublicNonRestoreSnapshotEnabledLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "EBSPublicNonRestoreSnapshotEnabledRule"
          - "Arn"

  EBSPublicNonRestoreSnapshotEnabledLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FSBP-EBSPublicNonRestoreSnapshotEnabledLambda
      Description: "[EC2.1] Amazon EBS snapshots should not be publicly restorable"
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt EBSPublicNonRestoreSnapshotEnabledLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def lambda_handler(event, context):
              snapshotId = str(event['detail']['findings'][0]['Resources'][0]['Details']['AwsEc2Volume']['SnapshotId'])
              Id = str(event['detail']['findings'][0]['Id'])
              ssm = boto3.client('ssm')
              try:
                  response = ssm.start_automation_execution(
                      DocumentName='Custom-FSBP-ModifySnapshot',
                      DocumentVersion='1', # default
                      Parameters={
                          'snapshotId': [ snapshotId ]
                      }
                  )
              except Exception as e:
                  print(e)
                  print("SSM automation execution error")
                  raise

  EBSPublicNonRestoreSnapshotEnabledLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: EBSPublicNonRestoreSnapshotEnabledLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:StartAutomationExecution
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:PassRole
            - ec2:*
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudtrail:UpdateTrail
            - securityhub:UpdateFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole